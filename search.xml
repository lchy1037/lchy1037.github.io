<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Qt 界面样式设计]]></title>
    <url>%2F2017%2F07%2F06%2FC-Qt-%E7%95%8C%E9%9D%A2%E6%A0%B7%E5%BC%8F%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[Qt 开发中有两种方法来进行 UI 定制：Qt 二维绘图 (Qt 2D drawing and painting) 以及 Qt 样式表 (Qt Style Sheet)，通常这两种方法需要结合一起使用，以发挥其强大的作用。这里主要针对 Qt 样式表 (Qt Style Sheet)，对使用 Qt 设计界面和控件样式的一些方法进行总结（建议用 QSS 写界面）。 1. Qt 界面样式设计 1.1. 控件样式设计 1.1.1. QLabel 样式 1.1.2. QComboBox 1.1.3. QEditLine 1.1.4. QCheckbox 1.1.5. QPushButton 1.1.6. QScrollBar 1.1.7. QTableWidget 1.2. 参考资料 1. Qt 界面样式设计1.1. 控件样式设计改变控件的样式一般使用 setStyleSheet(“”) 函数，其可填参数如下： 参数 效果说明 “background-color: rgb(0, 0, 0);” 设置 件的背景色为 QColor(0,0,0) “background: url(:/img/label_bg.png);” 用图片填充控件 “color: rgb(255, 255, 255);” 设置控件的文本颜色为 QColor(255,255,255) “font: bold 16px;” 设置控件中的文本字体为 16 号粗体 “border: 2px solid rgb(66, 169, 235);” 设置控件的边框宽度为 2px，颜色为 QColor(66,169,235) “border-radius: 4px;” 设置控件的边角为圆角 以下仅对具体控件的特殊样式设计进行说明。 1.1.1. QLabel 样式如果 style sheet 无法满足 QLabel 在应用的需求，可通过继承 QLabel 写自己新的 label 类。比如在 QLabel 的四个角画线，显示一种画框效果，可新建一个 MyQLabel 类，在类中重写 paintEvent(QPaintEvent *event) 函数即可。代码示例如下： 1234567891011121314151617181920void MyQLabel::paintEvent(QPaintEvent *event)&#123; QLabel::paintEvent(event); // 重要，先调用父类的 paintEvent() 为了显示原背景图像 int width = this-&gt;width(); int height = this-&gt;height(); QPainter painter(this); painter.setPen(QPen(QColor(66,169,235), 3)); painter.drawLine(QPointF(0, 0), QPointF(width/8, 0)); // 左上角横线 painter.drawLine(QPointF(0, 0), QPointF(0, height/8)); // 左上角竖线 painter.drawLine(QPointF(width, 0), QPointF(width*7/8, 0)); // 右上角横线 painter.drawLine(QPointF(width, 0), QPointF(width, height/8)); // 右上角竖线 painter.drawLine(QPointF(0, height), QPointF(width/8, height)); // 左下角横线 painter.drawLine(QPointF(0, height), QPointF(0, height*7/8)); // 左下角竖线 painter.drawLine(QPointF(width, height), QPointF(width*7/8, height)); // 右下角横线 painter.drawLine(QPointF(width, height), QPointF(width, height*7/8)); // 右下角竖线&#125; 效果如下（图中的照片是一张背景图）： 1.1.2. QComboBox参考链接：Qt Style Sheet实践（二）：组合框QComboBox的定制 1.1.3. QEditLine一般用 QEditLine 控件实现搜索框。 12345678910111213141516171819query_button = new QPushButton();query_button-&gt;setFixedWidth(50);query_button-&gt;setCursor(Qt::PointingHandCursor);query_button-&gt;setToolTip(tr("搜索"));// query_button-&gt;setFlat(true); // 实现按钮透明query_button-&gt;setStyleSheet("QPushButton&#123;background:url(:/button/button_search) center no-repeat; border: none;&#125;");query_edit = new QLineEdit();query_edit-&gt;setFixedWidth(530);query_edit-&gt;setPlaceholderText(tr("请输入要搜索的id"));query_edit-&gt;setStyleSheet("background-color: rgb(29,33,41); color: rgb(255,255,255); height: 35px; border: 1px solid rgb(66,169,235); border-radius: 6px;");QMargins margins = query_edit-&gt;textMargins(); // 设置文本与搜索框的边距，避免太靠近query_edit-&gt;setTextMargins(margins.left(), margins.top(), query_button-&gt;width(), margins.bottom());QHBoxLayout *query_edit_layout = new QHBoxLayout(); // 设置 query_edit 的布局query_edit_layout-&gt;addStretch();query_edit_layout-&gt;addWidget(query_button);query_edit_layout-&gt;setSpacing(0);query_edit_layout-&gt;setContentsMargins(0, 0, 5, 0);query_edit-&gt;setTextMargins(8, 0, 0, 0);query_edit-&gt;setLayout(query_edit_layout); 效果如下： 其他的样式设计可参考：Qt Style Sheet实践（四）：行文本编辑框QLineEdit及自动补全 1.1.4. QCheckbox 参数 效果说明 “QCheckBox::indicator {width: 20px; height: 20px;}” 设置勾选框的大小 “QCheckBox::indicator:unchecked {image: url(:/checkbox/unchecked);}” 设置勾选框未勾选时的效果 “QCheckBox::indicator:unchecked:hover {image: url(:/checkbox/unchecked_hover);}” 设置勾选框未勾选时鼠标悬浮状态下的效果 “QCheckBox::indicator:unchecked:pressed {image: url(:/checkbox/unchecked_press);}” 设置勾选框未勾选时鼠标点击状态下的效果 “QCheckBox::indicator:checked {image: url(:/checkbox/checked);}” 设置勾选框勾选时的效果 “QCheckBox::indicator:checked:hover {image: url(:/checkbox/checked_hover);}” 设置勾选框勾选时鼠标悬浮状态下的效果 “QCheckBox::indicator:checked:pressed {image: url(:/checkbox/checked_press);}” 设置勾选框勾选时鼠标点击状态下的效果 1.1.5. QPushButtonQPushButton 的独特的样式如下： 参数 效果说明 “QPushButton{background-color: rgb(66,169,235);}” 设置正常状态下 QPushButton 的背景色 “QPushButton:hover{background-color: rgb(60,195,245);}” 设置鼠标悬浮状态下 QPushButton 的背景色 “QPushButton:pressed{background-color: rgb(9,140,188);}” 设置鼠标点击状态下 QPushButton 的背景色 以上设置背景色的方法还可以改为设置图片，方法为：将 “background-color: rgb(66,169,235)” 改为 “border-image: url(:/pushbutton_normal.png)” 1.1.6. QScrollBar设置水平滚动条： 12345table_widget-&gt;horizontalScrollBar()-&gt;setStyleSheet("QScrollBar:horizontal&#123;background:rgb(32,36,45); padding-top:1px; padding-bottom:1px; padding-left:20px; padding-right:20px; border:1px solid rgb(38,42,53); height: 16px;&#125;" // 整体设置 "QScrollBar::handle:horizontal&#123;background:rgb(47,53,66); border-radius: 6px; border: 1px solid rgb(32,36,45);&#125;" // 设置滚动条 "QScrollBar::hadnle:horizontal:hover&#123;background:rgb(255,255,255); border-radius: 6px; border: none;&#125;" // 设置鼠标放到滚动条上的状态 "QScrollBar::add-line:horizontal&#123;background:url(:/scrollbar/arrow_right) center on-repeat;&#125;" // 设置右箭头 "QScrollBar::sub-line:horizontal&#123;background:url(:/scrollbar/arrow_left) center no-repeat;&#125;"); // 设置左箭头 设置垂直滚动条： 12345table_widget-&gt;verticalScrollBar()-&gt;setStyleSheet("QScrollBar:vertical&#123;background:rgb(32,36,45); padding-top:20px; padding-bottom:20px; padding-left:1px; padding-right:1px; border:1px solid rgb(38,42,53); width: 16px;&#125;" // 整体设置 "QScrollBar::handle:vertical&#123;background:rgb(47,53,66); border-radius: 6px; border: none;&#125;" // 设置滚动条 "QScrollBar::hadnle:vertical:hover&#123;background:rgb(255,255,255); border-radius: 6px; border: none;&#125;" // 设置鼠标放到滚动条上的状态 "QScrollBar::add-line:vertical&#123;background:url(:/scrollbar/arrow_down) center on-repeat;&#125;" // 设置下箭头 "QScrollBar::sub-line:vertical&#123;background:url(:/scrollbar/arrow_up) center no-repeat;&#125;"); // 设置上箭头 QScrollBar 的一些样式属性说明： 1.1.7. QTableWidget设置表格样式： 123table_widget-&gt;setStyleSheet("selection-background-color: rgb(0, 120, 215)"); // 设置选中时的背景色table_widget-&gt;setStyleSheet("QWidget&#123;background-color: rgb(32,37,45)&#125;" // 设置普通状态下的背景色 "QTableWidget::item&#123;border-top: 1px solid rgb(38, 42, 53); border-bottom: 1px solid rgb(38, 42, 53)&#125;"); // 设置表格单元格 1.2. 参考资料 Qt Style Sheets Reference Qt Style Sheets Examples The Style Sheet Syntax Qt控件美化 Qt Style Sheet实践（一）：按钮及关联菜单 Qt Style Sheet实践（二）：组合框QComboBox的定制 Qt Style Sheet实践（三）：QCheckBox和QRadioButton Qt Style Sheet实践（四）：行文本编辑框QLineEdit及自动补全]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
        <tag>界面样式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my-first-blog]]></title>
    <url>%2F2017%2F05%2F24%2F%E9%9A%8F%E7%AC%94-my-first-blog%2F</url>
    <content type="text"><![CDATA[This is my first blog using NexT themes. This is a test blog123456#include &lt;iostream&gt;using namespace std;int main()&#123; cout &lt;&lt; "hello world!" &lt;&lt; endl; return 0;&#125; 与世界分享我的知识、经验和见解 codeblockhello.cpp12345#include &lt;iostream&gt;using namespace std;int main(int argc, char* argv[])&#123; return 0;&#125;]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F05%2F24%2F%E9%9A%8F%E7%AC%94-hello-world%2F</url>
    <content type="text"><![CDATA[Welcome to hexo! Qucik Start. Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>